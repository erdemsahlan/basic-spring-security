#server:
#  port: 8080
#
#spring:
#  datasource:
#    url: jdbc:postgresql://localhost:5432/postgres
#    username: admin
#    password: root
#  jpa:
#    database-platform: org.hibernate.dialect.PostgreSQLDialect
#    hibernate:
#      ddl-auto: update
#    properties:
#      hibernate:
#        show_sql: false
#        format_sql: true
#  main:
#    web-application-type: servlet
#
#  application:
#    security:
#      jwt:
#        secret-key : ff16ff67acb9367e89e158a3a4fa9812b3e11d43651fe2e3dcf1d1a9915a46b3
#        expiration: 7200000
#        refresh-token:
#          expiration: 7200000
server:
  port: ${PORT:8080}

spring:
  datasource:
    # Render.com PostgreSQL DATABASE_URL environment variable kullan
    url: ${DATABASE_URL:jdbc:postgresql://localhost:5432/postgres}
    username: ${DB_USERNAME:admin}
    password: ${DB_PASSWORD:root}

  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        show_sql: false
        format_sql: true
    # Production için connection pool optimizasyonu
    hikari:
      maximum-pool-size: 5
      minimum-idle: 2
      connection-timeout: 30000

  main:
    web-application-type: servlet

  application:
    security:
      jwt:
        # Production'da environment variable'dan al (güvenlik için)
        secret-key: ${JWT_SECRET:ff16ff67acb9367e89e158a3a4fa9812b3e11d43651fe2e3dcf1d1a9915a46b3}
        expiration: ${JWT_EXPIRATION:7200000}
        refresh-token:
          expiration: ${JWT_REFRESH_EXPIRATION:7200000}

# CORS konfigürasyonu
app:
  cors:
    # Development: http://localhost:3000,http://localhost:5173
    # Production: https://your-react-app.onrender.com
    allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:5173}
    allowed-methods: ${CORS_ALLOWED_METHODS:GET,POST,PUT,DELETE,OPTIONS,PATCH}
    allow-credentials: ${CORS_ALLOW_CREDENTIALS:true}
    max-age: ${CORS_MAX_AGE:3600}

# Production için logging konfigürasyonu
logging:
  level:
    org.hibernate.SQL: WARN
    org.hibernate.type.descriptor.sql.BasicBinder: WARN
    org.springframework.security: INFO
    root: INFO
  pattern:
    console: "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"

# Health check endpoint (Docker health check için)
management:
  endpoints:
    web:
      exposure:
        include: health
  endpoint:
    health:
      show-details: when-authorized